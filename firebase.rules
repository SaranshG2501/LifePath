
// Firestore rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Basic user authentication rule - users can access their own documents
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Classroom rules - more permissive to allow joining
    match /classrooms/{classroomId} {
      // Anyone authenticated can read classrooms
      allow read: if request.auth != null;
      
      // Only teachers can create classrooms
      allow create: if request.auth != null && 
                     request.resource.data.teacherId == request.auth.uid;
      
      // Teachers can update their own classrooms
      allow update: if request.auth != null && 
                     (resource.data.teacherId == request.auth.uid ||
                     // Allow students to join classrooms by updating the students array
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['students']) &&
                     getStudentIdFromUpdate() == request.auth.uid));
      
      // Helper function to extract student ID from update operation
      function getStudentIdFromUpdate() {
        let oldStudents = resource.data.students;
        let newStudents = request.resource.data.students;
        return newStudents.length > oldStudents.length ? 
          newStudents[newStudents.length - 1].id : null;
      }
      
      // Votes subcollection - students can vote
      match /votes/{voteId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && voteId == request.auth.uid;
      }
    }
    
    // Public reading of class codes for joining
    match /classCodes/{code} {
      allow read: if request.auth != null;
      allow write: if false; // Only managed by backend functions
    }
  }
}
