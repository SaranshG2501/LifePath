
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isTeacher(classroomData) {
      return isAuthenticated() && request.auth.uid == classroomData.teacherId;
    }
    
    function isMember(classroomData) {
      return isAuthenticated() && 
             classroomData.members != null &&
             request.auth.uid in classroomData.members;
    }
    
    function isValidJoin(classroomData) {
      return isAuthenticated() && 
             request.resource.data.members.hasAll(resource.data.get('members', [])) &&
             request.resource.data.members.size() == resource.data.get('members', []).size() + 1 &&
             request.auth.uid in request.resource.data.members &&
             !(request.auth.uid in resource.data.get('members', []));
    }
    
    function isValidRemoval(classroomData) {
      return isAuthenticated() && 
             isTeacher(resource.data) &&
             request.resource.data.members.hasAll(resource.data.get('members', []).removeAll([request.auth.uid]));
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      
      // Allow updating classrooms field when joining/leaving
      allow update: if isAuthenticated() && 
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['classrooms', 'lastUpdated']);
    }
    
    // Classrooms collection
    match /classrooms/{classroomId} {
      // Read access - any authenticated user can read
      allow read: if isAuthenticated();
      
      // Create access - only authenticated users can create
      allow create: if isAuthenticated() && 
                     request.resource.data.teacherId == request.auth.uid;
      
      // Update access - ENHANCED for live sessions and student management
      allow update: if isAuthenticated() && 
                     (isTeacher(resource.data) ||  // Teacher can update anything
                      // Student can join by adding themselves to members
                      isValidJoin(resource.data) ||
                      // Teacher can remove students
                      isValidRemoval(resource.data) ||
                      // Allow updating activeSessionId and related fields
                      (isTeacher(resource.data) && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['activeSessionId', 'lastUpdated'])) ||
                      // Allow adding to both members and students arrays for compatibility
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'students', 'lastUpdated']) &&
                       request.resource.data.members.hasAll(resource.data.get('members', [])) &&
                       request.resource.data.members.size() <= resource.data.get('members', []).size() + 1));
                      
      // Delete access - only teachers
      allow delete: if isAuthenticated() && isTeacher(resource.data);
    }
    
    // Live Sessions collection - ENHANCED for real-time sync
    match /sessions/{sessionId} {
      // Create access - only authenticated users
      allow create: if isAuthenticated() && 
                     request.resource.data.teacherId == request.auth.uid;
      
      // Read access - any authenticated user (for real-time updates)
      allow read: if isAuthenticated();
      
      // Update access - ENHANCED for better scene syncing and voting
      allow update: if isAuthenticated() && 
                     (resource.data.teacherId == request.auth.uid ||  // Teacher can update everything
                      // Students can join, vote, and sync to scene changes
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'votes', 'currentChoices', 'lastUpdated']) ||
                      // Allow scene updates and vote resets from teacher (CRITICAL FOR SYNCING)
                      (resource.data.teacherId == request.auth.uid && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentSceneId', 'currentSceneIndex', 'votes', 'currentChoices', 'lastUpdated'])) ||
                      // Allow status updates for ending sessions
                      (resource.data.teacherId == request.auth.uid && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'resultPayload', 'lastUpdated'])) ||
                      // Allow students to update their individual vote/choice
                      (request.resource.data.votes.keys().hasOnly([request.auth.uid]) ||
                       request.resource.data.currentChoices.keys().hasOnly([request.auth.uid])));
      
      // Delete access - only teachers
      allow delete: if isAuthenticated() && resource.data.teacherId == request.auth.uid;
    }
    
    // Session Participants - Enhanced for live sessions
    match /sessionParticipants/{participantId} {
      allow create: if isAuthenticated() && 
                     request.resource.data.studentId == request.auth.uid;
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && 
                     (resource.data.studentId == request.auth.uid ||
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isActive', 'lastUpdated']));
      allow delete: if isAuthenticated() && resource.data.studentId == request.auth.uid;
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.studentId == request.auth.uid;
      allow write: if isAuthenticated() && request.resource.data.studentId == request.auth.uid;
      allow delete: if isAuthenticated();
    }
    
    // Class codes (for joining classrooms)
    match /classCodes/{code} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Scenario History
    match /scenarioHistory/{historyId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
  }
}
