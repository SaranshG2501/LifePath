
// Firestore rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Basic user authentication rule - users can access their own documents
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow updating just the classrooms field for joining a class
      allow update: if request.auth != null && 
                     (request.auth.uid == userId || 
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['classrooms'])));
    }
    
    // Classroom rules
    match /classrooms/{classroomId} {
      // Anyone authenticated can read classrooms
      allow read: if request.auth != null;
      
      // Only teachers can create classrooms
      allow create: if request.auth != null && 
                     request.resource.data.teacherId == request.auth.uid;
      
      // Teachers can update their own classrooms or students can join by adding themselves
      allow update: if request.auth != null && 
                     (resource.data.teacherId == request.auth.uid || 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['students']));
                      
      // Only teachers can delete their classrooms
      allow delete: if request.auth != null && 
                     resource.data.teacherId == request.auth.uid;
      
      // Votes subcollection - students can vote
      match /votes/{voteId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && voteId == request.auth.uid;
      }
    }
    
    // Public reading of class codes for joining
    match /classCodes/{code} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Allow students to access class codes
    }
  }
}
