
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isTeacher(classroomData) {
      return isAuthenticated() && request.auth.uid == classroomData.teacherId;
    }
    
    function isMember(classroomData) {
      return isAuthenticated() && 
             classroomData.members != null &&
             request.auth.uid in classroomData.members;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      
      // Allow updating classrooms field when joining
      allow update: if isAuthenticated() && 
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['classrooms']);
    }
    
    // Classrooms collection
    match /classrooms/{classroomId} {
      // Read access
      allow read: if isAuthenticated();
      
      // Create access - only teachers
      allow create: if isAuthenticated() && 
                     request.resource.data.teacherId == request.auth.uid;
      
      // Update access - FIXED for better joining and removal
      allow update: if isAuthenticated() && 
                     (isTeacher(resource.data) ||  // Teacher can update anything
                      // Student can join by adding themselves to members
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       request.resource.data.members.hasAll(resource.data.members) &&
                       request.resource.data.members.size() == resource.data.members.size() + 1 &&
                       request.auth.uid in request.resource.data.members &&
                       !(request.auth.uid in resource.data.members)) ||
                      // Student can also be added to students array (compatibility)
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['students', 'members']) &&
                       request.resource.data.members.hasAll(resource.data.members) &&
                       request.resource.data.members.size() <= resource.data.members.size() + 1));
                      
      // Delete access - only teachers
      allow delete: if isAuthenticated() && isTeacher(resource.data);
      
      // Votes subcollection
      match /votes/{voteId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && voteId == request.auth.uid;
      }
    }
    
    // Live Sessions collection
    match /sessions/{sessionId} {
      // Create access - only teachers
      allow create: if isAuthenticated() && 
                     request.resource.data.teacherId == request.auth.uid;
      
      // Read access - anyone authenticated
      allow read: if isAuthenticated();
      
      // Update access - ENHANCED for better scene syncing
      allow update: if isAuthenticated() && 
                     (resource.data.teacherId == request.auth.uid ||  // Teacher can update
                      // Students can join and submit choices
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'currentChoices', 'votes', 'lastUpdated']) ||
                      // Allow scene updates and vote resets from teacher
                      (resource.data.teacherId == request.auth.uid && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentSceneId', 'currentSceneIndex', 'votes', 'lastUpdated'])));
      
      // Delete access - only teachers
      allow delete: if isAuthenticated() && resource.data.teacherId == request.auth.uid;
    }
    
    // Session Participants
    match /sessionParticipants/{participantId} {
      allow create: if isAuthenticated() && 
                     request.resource.data.studentId == request.auth.uid;
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && 
                     (resource.data.studentId == request.auth.uid ||
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isActive']));
      allow delete: if isAuthenticated() && resource.data.studentId == request.auth.uid;
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.studentId == request.auth.uid;
      allow write: if isAuthenticated() && request.resource.data.studentId == request.auth.uid;
      allow delete: if isAuthenticated();
    }
    
    // Class codes (for joining classrooms)
    match /classCodes/{code} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
  }
}
